# Generated by Django 2.2.1 on 2019-05-15 15:25

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AiPlanets',
            fields=[
                ('planetid', models.IntegerField(primary_key=True, serialize=False)),
                ('nextupdate', models.DateTimeField()),
                ('enemysignature', models.IntegerField()),
                ('signaturesent', models.IntegerField()),
            ],
            options={
                'db_table': 'ai_planets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AiRoguePlanets',
            fields=[
                ('planetid', models.IntegerField(primary_key=True, serialize=False)),
                ('nextupdate', models.DateTimeField()),
                ('is_production', models.BooleanField()),
            ],
            options={
                'db_table': 'ai_rogue_planets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AiRogueTargets',
            fields=[
                ('planetid', models.IntegerField(primary_key=True, serialize=False)),
                ('status', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'ai_rogue_targets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AiWatchedPlanets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planetid', models.IntegerField()),
                ('watched_since', models.DateTimeField()),
            ],
            options={
                'db_table': 'ai_watched_planets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Alliances',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('name', models.CharField(max_length=32)),
                ('description', models.TextField()),
                ('tag', models.CharField(max_length=4)),
                ('logo_url', models.CharField(max_length=255)),
                ('website_url', models.CharField(max_length=255)),
                ('announce', models.TextField()),
                ('max_members', models.IntegerField()),
                ('tax', models.SmallIntegerField()),
                ('credits', models.BigIntegerField()),
                ('score', models.IntegerField()),
                ('previous_score', models.IntegerField()),
                ('score_combat', models.IntegerField()),
                ('defcon', models.SmallIntegerField()),
                ('announce_last_update', models.DateTimeField()),
                ('visible', models.BooleanField()),
                ('last_kick', models.DateTimeField()),
                ('last_dividends', models.DateField()),
            ],
            options={
                'db_table': 'alliances',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AlliancesRanks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rankid', models.SmallIntegerField()),
                ('label', models.CharField(max_length=32)),
                ('leader', models.BooleanField()),
                ('can_invite_player', models.BooleanField()),
                ('can_kick_player', models.BooleanField()),
                ('can_create_nap', models.BooleanField()),
                ('can_break_nap', models.BooleanField()),
                ('can_ask_money', models.BooleanField()),
                ('can_see_reports', models.BooleanField()),
                ('can_accept_money_requests', models.BooleanField()),
                ('can_change_tax_rate', models.BooleanField()),
                ('can_mail_alliance', models.BooleanField()),
                ('is_default', models.BooleanField()),
                ('members_displayed', models.BooleanField()),
                ('can_manage_description', models.BooleanField()),
                ('can_manage_announce', models.BooleanField()),
                ('enabled', models.BooleanField()),
                ('can_see_members_info', models.BooleanField()),
                ('tax', models.SmallIntegerField()),
                ('can_order_other_fleets', models.BooleanField()),
                ('can_use_alliance_radars', models.BooleanField()),
                ('allianceid', models.ForeignKey(db_column='allianceid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Alliances')),
            ],
            options={
                'db_table': 'alliances_ranks',
                'managed': True,
                'unique_together': {('allianceid', 'rankid')},
            },
        ),
        migrations.CreateModel(
            name='BannedDomains',
            fields=[
                ('domain', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'banned_domains',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BannedLogins',
            fields=[
                ('login', models.TextField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'banned_logins',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Battles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('planetid', models.IntegerField()),
                ('rounds', models.SmallIntegerField()),
                ('key', models.CharField(max_length=8, unique=True)),
            ],
            options={
                'db_table': 'battles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BattlesBuildings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battleid', models.IntegerField()),
                ('owner_id', models.IntegerField()),
                ('owner_name', models.CharField(max_length=16)),
                ('planet_name', models.CharField(max_length=18)),
                ('buildingid', models.IntegerField()),
                ('before', models.IntegerField()),
                ('after', models.IntegerField()),
            ],
            options={
                'db_table': 'battles_buildings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BattlesFleets',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('owner_id', models.IntegerField(blank=True, null=True)),
                ('owner_name', models.CharField(max_length=16)),
                ('fleet_id', models.IntegerField(blank=True, null=True)),
                ('fleet_name', models.CharField(max_length=18)),
                ('attackonsight', models.BooleanField()),
                ('won', models.BooleanField()),
                ('mod_shield', models.SmallIntegerField()),
                ('mod_handling', models.SmallIntegerField()),
                ('mod_tracking_speed', models.SmallIntegerField()),
                ('mod_damage', models.SmallIntegerField()),
                ('alliancetag', models.TextField(blank=True, null=True)),
                ('battleid', models.ForeignKey(db_column='battleid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Battles')),
            ],
            options={
                'db_table': 'battles_fleets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=24, null=True)),
                ('password', models.CharField(max_length=16)),
                ('topic', models.CharField(max_length=128)),
                ('public', models.BooleanField()),
            ],
            options={
                'db_table': 'chat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChatBannedWords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regexp', models.TextField()),
                ('replace_by', models.TextField()),
            ],
            options={
                'db_table': 'chat_banned_words',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChatChannels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=12, null=True)),
                ('password', models.CharField(max_length=16)),
                ('topic', models.CharField(max_length=128)),
                ('public', models.BooleanField()),
                ('allianceid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'chat_channels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Commanders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recruited', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=32)),
                ('points', models.SmallIntegerField()),
                ('mod_production_ore', models.FloatField()),
                ('mod_production_hydrocarbon', models.FloatField()),
                ('mod_production_energy', models.FloatField()),
                ('mod_production_workers', models.FloatField()),
                ('mod_fleet_damage', models.FloatField()),
                ('mod_fleet_speed', models.FloatField()),
                ('mod_fleet_shield', models.FloatField()),
                ('mod_fleet_handling', models.FloatField()),
                ('mod_fleet_tracking_speed', models.FloatField()),
                ('mod_fleet_signature', models.FloatField()),
                ('mod_construction_speed_buildings', models.FloatField()),
                ('mod_construction_speed_ships', models.FloatField()),
                ('mod_recycling', models.FloatField()),
                ('can_be_fired', models.BooleanField()),
                ('salary', models.IntegerField()),
                ('delete_on_reset', models.BooleanField()),
                ('added', models.DateTimeField()),
                ('salary_increases', models.SmallIntegerField()),
                ('salary_last_increase', models.DateTimeField()),
                ('mod_research_effectiveness', models.FloatField()),
                ('mod_fleet_hull', models.IntegerField()),
                ('last_training', models.DateTimeField()),
            ],
            options={
                'db_table': 'commanders',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbBuildings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.SmallIntegerField()),
                ('name', models.CharField(max_length=32)),
                ('label', models.CharField(max_length=64)),
                ('description', models.TextField()),
                ('cost_ore', models.IntegerField()),
                ('cost_hydrocarbon', models.IntegerField()),
                ('cost_credits', models.IntegerField()),
                ('workers', models.IntegerField()),
                ('energy_consumption', models.IntegerField()),
                ('energy_production', models.IntegerField()),
                ('floor', models.SmallIntegerField()),
                ('space', models.SmallIntegerField()),
                ('production_ore', models.IntegerField()),
                ('production_hydrocarbon', models.IntegerField()),
                ('storage_ore', models.IntegerField()),
                ('storage_hydrocarbon', models.IntegerField()),
                ('storage_workers', models.IntegerField()),
                ('construction_maximum', models.SmallIntegerField()),
                ('construction_time', models.IntegerField()),
                ('destroyable', models.BooleanField()),
                ('mod_production_ore', models.FloatField()),
                ('mod_production_hydrocarbon', models.FloatField()),
                ('mod_production_energy', models.FloatField()),
                ('mod_production_workers', models.FloatField()),
                ('mod_construction_speed_buildings', models.FloatField()),
                ('mod_construction_speed_ships', models.FloatField()),
                ('storage_scientists', models.IntegerField()),
                ('storage_soldiers', models.IntegerField()),
                ('radar_strength', models.SmallIntegerField()),
                ('radar_jamming', models.SmallIntegerField()),
                ('is_planet_element', models.BooleanField()),
                ('can_be_disabled', models.BooleanField()),
                ('training_scientists', models.IntegerField()),
                ('training_soldiers', models.IntegerField()),
                ('maintenance_factor', models.SmallIntegerField()),
                ('security_factor', models.SmallIntegerField()),
                ('sandworm_activity', models.SmallIntegerField()),
                ('seismic_activity', models.SmallIntegerField()),
                ('production_credits', models.IntegerField()),
                ('production_credits_random', models.IntegerField()),
                ('mod_research_effectiveness', models.FloatField()),
                ('energy_receive_antennas', models.SmallIntegerField()),
                ('energy_send_antennas', models.SmallIntegerField()),
                ('construction_time_exp_per_building', models.FloatField()),
                ('storage_energy', models.IntegerField()),
                ('buildable', models.BooleanField()),
                ('lifetime', models.IntegerField()),
                ('active_when_destroying', models.BooleanField()),
                ('upkeep', models.IntegerField()),
                ('cost_energy', models.IntegerField()),
                ('use_planet_production_pct', models.BooleanField()),
                ('production_exp_per_building', models.FloatField(blank=True, null=True)),
                ('consumption_exp_per_building', models.FloatField(blank=True, null=True)),
                ('vortex_strength', models.IntegerField()),
                ('production_prestige', models.IntegerField()),
                ('cost_prestige', models.IntegerField()),
                ('mod_planet_need_ore', models.FloatField()),
                ('mod_planet_need_hydrocarbon', models.FloatField()),
                ('bonus_planet_need_ore', models.IntegerField()),
                ('bonus_planet_need_hydrocarbon', models.IntegerField()),
                ('visible', models.BooleanField()),
                ('invasion_defense', models.IntegerField()),
                ('parked_ships_capacity', models.IntegerField()),
            ],
            options={
                'db_table': 'db_buildings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbBuildingsCategories',
            fields=[
                ('id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'db_buildings_categories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbFirstnames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
            ],
            options={
                'db_table': 'db_firstnames',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.SmallIntegerField()),
                ('name', models.CharField(max_length=32)),
                ('label', models.CharField(max_length=64)),
                ('description', models.TextField()),
                ('virtual', models.BooleanField()),
                ('movable', models.BooleanField()),
                ('volume', models.FloatField()),
            ],
            options={
                'db_table': 'db_items',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbLcid',
            fields=[
                ('lcid', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('label', models.TextField()),
            ],
            options={
                'db_table': 'db_lcid',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbMessages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lcid', models.SmallIntegerField()),
                ('subject', models.TextField()),
                ('body', models.TextField()),
                ('sender', models.TextField()),
            ],
            options={
                'db_table': 'db_messages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
            ],
            options={
                'db_table': 'db_names',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbOrientations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('selectable', models.BooleanField()),
            ],
            options={
                'db_table': 'db_orientations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.SmallIntegerField()),
                ('name', models.CharField(max_length=32)),
                ('label', models.CharField(max_length=64)),
                ('description', models.TextField()),
                ('rank', models.IntegerField()),
                ('levels', models.SmallIntegerField()),
                ('defaultlevel', models.SmallIntegerField()),
                ('cost_credits', models.IntegerField()),
                ('mod_production_ore', models.FloatField()),
                ('mod_production_hydrocarbon', models.FloatField()),
                ('mod_production_energy', models.FloatField()),
                ('mod_production_workers', models.FloatField()),
                ('mod_construction_speed_buildings', models.FloatField()),
                ('mod_construction_speed_ships', models.FloatField()),
                ('mod_fleet_damage', models.FloatField()),
                ('mod_fleet_speed', models.FloatField()),
                ('mod_fleet_shield', models.FloatField()),
                ('mod_fleet_handling', models.FloatField()),
                ('mod_fleet_tracking_speed', models.FloatField()),
                ('mod_fleet_energy_capacity', models.FloatField()),
                ('mod_fleet_energy_usage', models.FloatField()),
                ('mod_fleet_signature', models.FloatField()),
                ('mod_merchant_buy_price', models.FloatField()),
                ('mod_merchant_sell_price', models.FloatField()),
                ('mod_merchant_speed', models.FloatField()),
                ('mod_upkeep_commanders_cost', models.FloatField()),
                ('mod_upkeep_planets_cost', models.FloatField()),
                ('mod_upkeep_scientists_cost', models.FloatField()),
                ('mod_upkeep_soldiers_cost', models.FloatField()),
                ('mod_upkeep_ships_cost', models.FloatField()),
                ('mod_research_cost', models.FloatField()),
                ('mod_research_time', models.FloatField()),
                ('mod_recycling', models.FloatField()),
                ('mod_commanders', models.FloatField()),
                ('mod_planets', models.FloatField()),
                ('mod_research_effectiveness', models.FloatField()),
                ('mod_energy_transfer_effectiveness', models.FloatField()),
                ('mod_prestige_from_ships', models.FloatField()),
                ('modf_bounty', models.FloatField()),
                ('mod_prestige_from_buildings', models.FloatField()),
                ('mod_planet_need_ore', models.FloatField()),
                ('mod_planet_need_hydrocarbon', models.FloatField()),
                ('mod_fleet_jump_speed', models.FloatField()),
                ('expiration', models.DurationField(blank=True, null=True)),
            ],
            options={
                'db_table': 'db_research',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbSecurityLevels',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('max_planets', models.IntegerField()),
                ('max_commanders', models.IntegerField()),
            ],
            options={
                'db_table': 'db_security_levels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbShipModules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.SmallIntegerField()),
                ('label', models.TextField()),
                ('description', models.TextField()),
                ('cost_ore', models.IntegerField()),
                ('cost_hydrocarbon', models.IntegerField()),
                ('cost_credits', models.IntegerField()),
                ('workers', models.IntegerField()),
                ('crew', models.SmallIntegerField()),
                ('capacity', models.IntegerField()),
                ('construction_time', models.IntegerField()),
                ('maximum', models.SmallIntegerField()),
                ('hull', models.IntegerField()),
                ('shield', models.IntegerField()),
                ('weapon_power', models.SmallIntegerField()),
                ('weapon_ammo', models.SmallIntegerField()),
                ('weapon_tracking_speed', models.SmallIntegerField()),
                ('weapon_turrets', models.SmallIntegerField()),
                ('signature', models.SmallIntegerField()),
                ('speed', models.IntegerField()),
                ('handling', models.IntegerField()),
                ('recycler_output', models.IntegerField()),
                ('droppods', models.SmallIntegerField()),
                ('long_distance_capacity', models.SmallIntegerField()),
                ('mod_speed', models.SmallIntegerField()),
                ('mod_shield', models.SmallIntegerField()),
                ('mod_handling', models.SmallIntegerField()),
                ('mod_tracking_speed', models.SmallIntegerField()),
                ('mod_damage', models.SmallIntegerField()),
                ('mod_signature', models.SmallIntegerField()),
                ('mod_recycling', models.SmallIntegerField()),
                ('cpu', models.SmallIntegerField()),
                ('power', models.SmallIntegerField()),
                ('usage_cpu', models.SmallIntegerField()),
                ('usage_power', models.SmallIntegerField()),
                ('usage_slot_low', models.SmallIntegerField()),
                ('usage_slot_middle', models.SmallIntegerField()),
                ('usage_slot_high', models.SmallIntegerField()),
                ('weight', models.IntegerField()),
            ],
            options={
                'db_table': 'db_ship_modules',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbShips',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.SmallIntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=32)),
                ('label', models.CharField(max_length=64)),
                ('description', models.TextField()),
                ('cost_ore', models.IntegerField()),
                ('cost_hydrocarbon', models.IntegerField()),
                ('cost_credits', models.IntegerField()),
                ('workers', models.IntegerField()),
                ('crew', models.SmallIntegerField()),
                ('capacity', models.IntegerField()),
                ('construction_time', models.IntegerField()),
                ('maximum', models.SmallIntegerField()),
                ('hull', models.IntegerField()),
                ('shield', models.IntegerField()),
                ('weapon_power', models.SmallIntegerField()),
                ('weapon_ammo', models.SmallIntegerField()),
                ('weapon_tracking_speed', models.SmallIntegerField()),
                ('weapon_turrets', models.SmallIntegerField()),
                ('signature', models.SmallIntegerField()),
                ('speed', models.IntegerField()),
                ('handling', models.SmallIntegerField()),
                ('recycler_output', models.IntegerField()),
                ('droppods', models.SmallIntegerField()),
                ('long_distance_capacity', models.SmallIntegerField()),
                ('buildable', models.BooleanField()),
                ('required_shipid', models.IntegerField(blank=True, null=True)),
                ('new_shipid', models.IntegerField(blank=True, null=True)),
                ('mod_speed', models.FloatField()),
                ('mod_shield', models.FloatField()),
                ('mod_handling', models.FloatField()),
                ('mod_tracking_speed', models.FloatField()),
                ('mod_damage', models.FloatField()),
                ('mod_signature', models.FloatField()),
                ('mod_recycling', models.FloatField()),
                ('protection', models.IntegerField()),
                ('upkeep', models.IntegerField()),
                ('cost_energy', models.IntegerField()),
                ('weapon_dmg_em', models.SmallIntegerField()),
                ('weapon_dmg_explosive', models.SmallIntegerField()),
                ('weapon_dmg_kinetic', models.SmallIntegerField()),
                ('weapon_dmg_thermal', models.SmallIntegerField()),
                ('resist_em', models.SmallIntegerField()),
                ('resist_explosive', models.SmallIntegerField()),
                ('resist_kinetic', models.SmallIntegerField()),
                ('resist_thermal', models.SmallIntegerField()),
                ('tech', models.SmallIntegerField()),
                ('prestige_reward', models.IntegerField()),
                ('credits_reward', models.IntegerField()),
                ('cost_prestige', models.IntegerField()),
                ('built_per_batch', models.IntegerField()),
                ('bounty', models.IntegerField()),
                ('required_vortex_strength', models.IntegerField()),
                ('leadership', models.IntegerField()),
                ('can_be_parked', models.BooleanField()),
                ('required_jump_capacity', models.IntegerField()),
                ('buildingid', models.ForeignKey(blank=True, db_column='buildingid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
            ],
            options={
                'db_table': 'db_ships',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbShipStructures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.SmallIntegerField()),
                ('label', models.TextField()),
                ('description', models.TextField()),
                ('cost_ore', models.IntegerField()),
                ('cost_hydrocarbon', models.IntegerField()),
                ('cost_credits', models.IntegerField()),
                ('workers', models.IntegerField()),
                ('crew', models.IntegerField()),
                ('capacity', models.IntegerField()),
                ('construction_time', models.IntegerField()),
                ('hull', models.IntegerField()),
                ('signature', models.SmallIntegerField()),
                ('handling', models.IntegerField()),
                ('buildingid', models.IntegerField(blank=True, null=True)),
                ('cpu', models.SmallIntegerField()),
                ('power', models.SmallIntegerField()),
                ('slot_low', models.SmallIntegerField()),
                ('slot_middle', models.SmallIntegerField()),
                ('slot_high', models.SmallIntegerField()),
                ('weight', models.IntegerField(db_column='Weight')),
            ],
            options={
                'db_table': 'db_ship_structures',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbSuccesses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
            options={
                'db_table': 'db_successes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Fleets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.IntegerField()),
                ('name', models.CharField(max_length=18)),
                ('action', models.SmallIntegerField()),
                ('action_start_time', models.DateTimeField(blank=True, null=True)),
                ('action_end_time', models.DateTimeField(blank=True, null=True)),
                ('attackonsight', models.BooleanField()),
                ('engaged', models.BooleanField()),
                ('cargo_capacity', models.IntegerField()),
                ('cargo_ore', models.IntegerField()),
                ('cargo_hydrocarbon', models.IntegerField()),
                ('cargo_workers', models.IntegerField()),
                ('cargo_scientists', models.IntegerField()),
                ('cargo_soldiers', models.IntegerField()),
                ('size', models.IntegerField()),
                ('speed', models.IntegerField()),
                ('signature', models.IntegerField()),
                ('military_signature', models.IntegerField()),
                ('real_signature', models.IntegerField()),
                ('recycler_output', models.IntegerField()),
                ('idle_since', models.DateTimeField(blank=True, null=True)),
                ('droppods', models.IntegerField()),
                ('long_distance_capacity', models.IntegerField()),
                ('firepower', models.BigIntegerField()),
                ('score', models.BigIntegerField()),
                ('mod_speed', models.SmallIntegerField()),
                ('mod_shield', models.SmallIntegerField()),
                ('mod_handling', models.SmallIntegerField()),
                ('mod_tracking_speed', models.SmallIntegerField()),
                ('mod_damage', models.SmallIntegerField()),
                ('mod_recycling', models.FloatField()),
                ('mod_signature', models.FloatField()),
                ('upkeep', models.IntegerField()),
                ('recycler_percent', models.FloatField()),
                ('categoryid', models.SmallIntegerField()),
                ('required_vortex_strength', models.IntegerField()),
                ('leadership', models.BigIntegerField()),
                ('shared', models.BooleanField()),
                ('commanderid', models.OneToOneField(blank=True, db_column='commanderid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Commanders')),
            ],
            options={
                'db_table': 'fleets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GscLevels',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'gsc_levels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Invasions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('planet_id', models.IntegerField()),
                ('planet_name', models.CharField(max_length=32)),
                ('attacker_name', models.CharField(max_length=16)),
                ('defender_name', models.CharField(max_length=16)),
                ('attacker_succeeded', models.BooleanField()),
                ('soldiers_total', models.IntegerField()),
                ('soldiers_lost', models.IntegerField()),
                ('def_scientists_total', models.IntegerField()),
                ('def_scientists_lost', models.IntegerField()),
                ('def_soldiers_total', models.IntegerField()),
                ('def_soldiers_lost', models.IntegerField()),
                ('def_workers_total', models.IntegerField()),
                ('def_workers_lost', models.IntegerField()),
            ],
            options={
                'db_table': 'invasions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogAdminActions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('adminuserid', models.IntegerField()),
                ('userid', models.IntegerField()),
                ('action', models.SmallIntegerField()),
                ('reason', models.CharField(blank=True, max_length=128, null=True)),
                ('reason_public', models.CharField(blank=True, max_length=128, null=True)),
                ('admin_notes', models.TextField()),
            ],
            options={
                'db_table': 'log_admin_actions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogHttpErrors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('user', models.CharField(blank=True, max_length=32, null=True)),
                ('http_error_code', models.TextField(blank=True, null=True)),
                ('err_asp_code', models.TextField(blank=True, null=True)),
                ('err_number', models.TextField(blank=True, null=True)),
                ('err_source', models.TextField(blank=True, null=True)),
                ('err_category', models.TextField(blank=True, null=True)),
                ('err_file', models.TextField(blank=True, null=True)),
                ('err_line', models.TextField(blank=True, null=True)),
                ('err_column', models.TextField(blank=True, null=True)),
                ('err_description', models.TextField(blank=True, null=True)),
                ('err_aspdescription', models.TextField(blank=True, null=True)),
                ('details', models.CharField(max_length=128)),
                ('url', models.CharField(max_length=128)),
            ],
            options={
                'db_table': 'log_http_errors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogJobs',
            fields=[
                ('task', models.CharField(max_length=128, primary_key=True, serialize=False, unique=True)),
                ('lastupdate', models.DateTimeField()),
                ('state', models.CharField(max_length=128)),
                ('processid', models.IntegerField()),
            ],
            options={
                'db_table': 'log_jobs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogNotices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('username', models.CharField(blank=True, max_length=32, null=True)),
                ('title', models.CharField(max_length=128)),
                ('details', models.CharField(max_length=128)),
                ('url', models.CharField(max_length=128)),
                ('repeats', models.IntegerField()),
                ('level', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'log_notices',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogPages',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField()),
                ('userid', models.IntegerField()),
                ('webpage', models.CharField(max_length=256)),
                ('elapsed', models.FloatField()),
            ],
            options={
                'db_table': 'log_pages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogReferers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referer', models.TextField()),
                ('page', models.TextField(blank=True, null=True)),
                ('pages', models.TextField()),
            ],
            options={
                'db_table': 'log_referers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogSysErrors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('procedure', models.TextField()),
                ('added', models.DateTimeField()),
                ('error', models.TextField()),
            ],
            options={
                'db_table': 'log_sys_errors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MarketHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField()),
                ('ore_sold', models.IntegerField(blank=True, null=True)),
                ('hydrocarbon_sold', models.IntegerField()),
                ('credits', models.IntegerField()),
                ('username', models.CharField(blank=True, max_length=16, null=True)),
                ('workers_sold', models.IntegerField()),
                ('scientists_sold', models.IntegerField()),
                ('soldiers_sold', models.IntegerField()),
            ],
            options={
                'db_table': 'market_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MessagesMoneyTransfers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('senderid', models.IntegerField(blank=True, null=True)),
                ('sendername', models.CharField(max_length=20)),
                ('toid', models.IntegerField(blank=True, null=True)),
                ('toname', models.CharField(blank=True, max_length=16, null=True)),
                ('credits', models.IntegerField()),
            ],
            options={
                'db_table': 'messages_money_transfers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NavGalaxies',
            fields=[
                ('id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('colonies', models.IntegerField()),
                ('visible', models.BooleanField()),
                ('allow_new_players', models.BooleanField()),
                ('created', models.DateTimeField()),
                ('reserved_for_gameover', models.BooleanField()),
                ('planets', models.IntegerField()),
                ('protected_until', models.DateTimeField(blank=True, null=True)),
                ('has_merchants', models.BooleanField()),
                ('traded_ore', models.BigIntegerField()),
                ('traded_hydrocarbon', models.BigIntegerField()),
                ('price_ore', models.FloatField()),
                ('price_hydrocarbon', models.FloatField()),
            ],
            options={
                'db_table': 'nav_galaxies',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NavPlanet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('sector', models.SmallIntegerField()),
                ('planet', models.SmallIntegerField()),
                ('warp_to', models.IntegerField(blank=True, null=True)),
                ('planet_floor', models.SmallIntegerField()),
                ('planet_space', models.SmallIntegerField()),
                ('planet_pct_ore', models.SmallIntegerField()),
                ('planet_pct_hydrocarbon', models.SmallIntegerField()),
                ('pct_ore', models.SmallIntegerField()),
                ('pct_hydrocarbon', models.SmallIntegerField()),
                ('floor', models.SmallIntegerField()),
                ('space', models.SmallIntegerField()),
                ('floor_occupied', models.SmallIntegerField()),
                ('space_occupied', models.SmallIntegerField()),
                ('score', models.BigIntegerField()),
                ('ore', models.IntegerField()),
                ('ore_capacity', models.IntegerField()),
                ('ore_production', models.IntegerField()),
                ('ore_production_raw', models.IntegerField()),
                ('hydrocarbon', models.IntegerField()),
                ('hydrocarbon_capacity', models.IntegerField()),
                ('hydrocarbon_production', models.IntegerField()),
                ('hydrocarbon_production_raw', models.IntegerField()),
                ('workers', models.IntegerField()),
                ('workers_capacity', models.IntegerField()),
                ('workers_busy', models.IntegerField()),
                ('scientists', models.IntegerField()),
                ('scientists_capacity', models.IntegerField()),
                ('soldiers', models.IntegerField()),
                ('soldiers_capacity', models.IntegerField()),
                ('energy_consumption', models.IntegerField()),
                ('energy_production', models.IntegerField()),
                ('production_lastupdate', models.DateTimeField(blank=True, null=True)),
                ('production_frozen', models.BooleanField()),
                ('radar_strength', models.SmallIntegerField()),
                ('radar_jamming', models.SmallIntegerField()),
                ('spawn_ore', models.IntegerField()),
                ('spawn_hydrocarbon', models.IntegerField()),
                ('orbit_ore', models.IntegerField()),
                ('orbit_hydrocarbon', models.IntegerField()),
                ('mod_production_ore', models.SmallIntegerField()),
                ('mod_production_hydrocarbon', models.SmallIntegerField()),
                ('mod_production_energy', models.SmallIntegerField()),
                ('mod_production_workers', models.SmallIntegerField()),
                ('mod_construction_speed_buildings', models.SmallIntegerField()),
                ('mod_construction_speed_ships', models.SmallIntegerField()),
                ('training_scientists', models.IntegerField()),
                ('training_soldiers', models.IntegerField()),
                ('mood', models.SmallIntegerField()),
                ('buildings_dilapidation', models.IntegerField()),
                ('previous_buildings_dilapidation', models.IntegerField()),
                ('workers_for_maintenance', models.IntegerField()),
                ('soldiers_for_security', models.IntegerField()),
                ('next_battle', models.DateTimeField(blank=True, null=True)),
                ('colonization_datetime', models.DateTimeField(blank=True, null=True)),
                ('last_catastrophe', models.DateTimeField()),
                ('next_training_datetime', models.DateTimeField()),
                ('recruit_workers', models.BooleanField()),
                ('sandworm_activity', models.SmallIntegerField()),
                ('seismic_activity', models.SmallIntegerField()),
                ('production_percent', models.FloatField()),
                ('blocus_strength', models.SmallIntegerField(blank=True, null=True)),
                ('credits_production', models.IntegerField()),
                ('credits_random_production', models.IntegerField()),
                ('mod_research_effectiveness', models.SmallIntegerField()),
                ('energy_receive_antennas', models.SmallIntegerField()),
                ('energy_send_antennas', models.SmallIntegerField()),
                ('energy_receive_links', models.SmallIntegerField()),
                ('energy_send_links', models.SmallIntegerField()),
                ('energy', models.IntegerField()),
                ('energy_capacity', models.IntegerField()),
                ('next_planet_update', models.DateTimeField(blank=True, null=True)),
                ('upkeep', models.IntegerField()),
                ('shipyard_next_continue', models.DateTimeField(blank=True, null=True)),
                ('shipyard_suspended', models.BooleanField()),
                ('market_buy_ore_price', models.SmallIntegerField(blank=True, null=True)),
                ('market_buy_hydrocarbon_price', models.SmallIntegerField(blank=True, null=True)),
                ('credits_total', models.IntegerField()),
                ('credits_next_update', models.DateTimeField()),
                ('credits_updates', models.SmallIntegerField()),
                ('planet_vortex_strength', models.IntegerField()),
                ('vortex_strength', models.IntegerField()),
                ('production_prestige', models.IntegerField()),
                ('planet_stock_ore', models.IntegerField()),
                ('planet_stock_hydrocarbon', models.IntegerField()),
                ('planet_need_ore', models.IntegerField()),
                ('planet_need_hydrocarbon', models.IntegerField()),
                ('buy_ore', models.IntegerField()),
                ('buy_hydrocarbon', models.IntegerField()),
                ('invasion_defense', models.IntegerField()),
                ('min_security_level', models.IntegerField()),
                ('parked_ships_capacity', models.IntegerField()),
                ('commanderid', models.ForeignKey(blank=True, db_column='commanderid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Commanders')),
                ('galaxy', models.ForeignKey(db_column='galaxy', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavGalaxies')),
            ],
            options={
                'db_table': 'nav_planet',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlanetOwners',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('planetid', models.IntegerField()),
                ('ownerid', models.IntegerField(blank=True, null=True)),
                ('newownerid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'planet_owners',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Routes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ownerid', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=32)),
                ('repeat', models.BooleanField()),
                ('created', models.DateTimeField()),
                ('modified', models.DateTimeField()),
                ('last_used', models.DateTimeField()),
            ],
            options={
                'db_table': 'routes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SessionsNotifications',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('userid', models.IntegerField()),
                ('type', models.CharField(max_length=16)),
                ('data', models.TextField()),
                ('added', models.DateTimeField()),
            ],
            options={
                'db_table': 'sessions_notifications',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SysDailyUpdates',
            fields=[
                ('procedure', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('enabled', models.BooleanField()),
                ('last_runtime', models.DateTimeField()),
                ('run_every', models.DurationField()),
                ('last_result', models.TextField(blank=True, null=True)),
                ('last_executiontimes', models.TextField()),
            ],
            options={
                'db_table': 'sys_daily_updates',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SysEvents',
            fields=[
                ('procedure', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('enabled', models.BooleanField()),
                ('last_runtime', models.DateTimeField()),
                ('run_every', models.DurationField()),
                ('last_result', models.TextField(blank=True, null=True)),
                ('last_executiontimes', models.TextField()),
            ],
            options={
                'db_table': 'sys_events',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SysProcesses',
            fields=[
                ('procedure', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('enabled', models.BooleanField()),
                ('last_runtime', models.DateTimeField()),
                ('run_every', models.DurationField()),
                ('last_result', models.TextField(blank=True, null=True)),
                ('last_executiontimes', models.TextField()),
            ],
            options={
                'db_table': 'sys_processes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('privilege', models.IntegerField()),
                ('login', models.CharField(blank=True, max_length=16, null=True)),
                ('password', models.CharField(blank=True, max_length=32, null=True)),
                ('lastlogin', models.DateTimeField(blank=True, null=True)),
                ('regdate', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=128, null=True)),
                ('credits', models.IntegerField()),
                ('credits_bankruptcy', models.SmallIntegerField(blank=True, null=True)),
                ('lcid', models.SmallIntegerField()),
                ('description', models.TextField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('avatar_url', models.CharField(max_length=255)),
                ('deletion_date', models.DateTimeField(blank=True, null=True)),
                ('score', models.IntegerField()),
                ('score_prestige', models.BigIntegerField()),
                ('score_buildings', models.BigIntegerField()),
                ('score_research', models.BigIntegerField()),
                ('score_ships', models.BigIntegerField()),
                ('alliance_rank', models.SmallIntegerField()),
                ('alliance_joined', models.DateTimeField(blank=True, null=True)),
                ('alliance_left', models.DateTimeField(blank=True, null=True)),
                ('alliance_taxes_paid', models.BigIntegerField()),
                ('alliance_credits_given', models.BigIntegerField()),
                ('alliance_credits_taken', models.BigIntegerField()),
                ('alliance_score_combat', models.IntegerField()),
                ('newpassword', models.CharField(blank=True, max_length=32, null=True)),
                ('lastactivity', models.DateTimeField(blank=True, null=True)),
                ('planets', models.IntegerField()),
                ('noplanets_since', models.DateTimeField(blank=True, null=True)),
                ('last_catastrophe', models.DateTimeField()),
                ('last_holidays', models.DateTimeField(blank=True, null=True)),
                ('previous_score', models.IntegerField()),
                ('timers_enabled', models.BooleanField()),
                ('ban_datetime', models.DateTimeField(blank=True, null=True)),
                ('ban_expire', models.DateTimeField(blank=True, null=True)),
                ('ban_reason', models.CharField(blank=True, max_length=128, null=True)),
                ('ban_reason_public', models.CharField(blank=True, max_length=128, null=True)),
                ('ban_adminuserid', models.IntegerField(blank=True, null=True)),
                ('scientists', models.IntegerField()),
                ('soldiers', models.IntegerField()),
                ('dev_lasterror', models.IntegerField(blank=True, null=True)),
                ('dev_lastnotice', models.IntegerField(blank=True, null=True)),
                ('protection_enabled', models.BooleanField()),
                ('protection_colonies_to_unprotect', models.SmallIntegerField()),
                ('protection_datetime', models.DateTimeField()),
                ('max_colonizable_planets', models.IntegerField()),
                ('remaining_colonizations', models.IntegerField()),
                ('upkeep_last_cost', models.IntegerField()),
                ('upkeep_commanders', models.FloatField()),
                ('upkeep_planets', models.FloatField()),
                ('upkeep_scientists', models.FloatField()),
                ('upkeep_soldiers', models.FloatField()),
                ('upkeep_ships', models.FloatField()),
                ('upkeep_ships_in_position', models.FloatField()),
                ('upkeep_ships_parked', models.FloatField()),
                ('wallet_display', models.TextField(blank=True, null=True)),
                ('resets', models.SmallIntegerField()),
                ('mod_production_ore', models.FloatField()),
                ('mod_production_hydrocarbon', models.FloatField()),
                ('mod_production_energy', models.FloatField()),
                ('mod_production_workers', models.FloatField()),
                ('mod_construction_speed_buildings', models.FloatField()),
                ('mod_construction_speed_ships', models.FloatField()),
                ('mod_fleet_damage', models.FloatField()),
                ('mod_fleet_speed', models.FloatField()),
                ('mod_fleet_shield', models.FloatField()),
                ('mod_fleet_handling', models.FloatField()),
                ('mod_fleet_tracking_speed', models.FloatField()),
                ('mod_fleet_energy_capacity', models.FloatField()),
                ('mod_fleet_energy_usage', models.FloatField()),
                ('mod_fleet_signature', models.FloatField()),
                ('mod_merchant_buy_price', models.FloatField()),
                ('mod_merchant_sell_price', models.FloatField()),
                ('mod_merchant_speed', models.FloatField()),
                ('mod_upkeep_commanders_cost', models.FloatField()),
                ('mod_upkeep_planets_cost', models.FloatField()),
                ('mod_upkeep_scientists_cost', models.FloatField()),
                ('mod_upkeep_soldiers_cost', models.FloatField()),
                ('mod_upkeep_ships_cost', models.FloatField()),
                ('mod_research_cost', models.FloatField()),
                ('mod_research_time', models.FloatField()),
                ('mod_recycling', models.FloatField()),
                ('mod_commanders', models.FloatField()),
                ('mod_planets', models.FloatField()),
                ('commanders_loyalty', models.SmallIntegerField()),
                ('orientation', models.SmallIntegerField()),
                ('admin_notes', models.TextField()),
                ('paid_until', models.DateTimeField(blank=True, null=True)),
                ('autosignature', models.CharField(blank=True, max_length=512, null=True)),
                ('game_started', models.DateTimeField()),
                ('mod_research_effectiveness', models.FloatField()),
                ('mod_energy_transfer_effectiveness', models.FloatField()),
                ('requests', models.BigIntegerField(blank=True, null=True)),
                ('score_next_update', models.DateTimeField()),
                ('display_alliance_planet_name', models.BooleanField()),
                ('score_visibility', models.SmallIntegerField()),
                ('prestige_points', models.IntegerField()),
                ('mod_prestige_from_buildings', models.FloatField()),
                ('displays_ads', models.BigIntegerField()),
                ('displays_pages', models.BigIntegerField()),
                ('ad_bonus_code', models.IntegerField(blank=True, null=True)),
                ('regaddress', models.GenericIPAddressField()),
                ('inframe', models.BooleanField(blank=True, null=True)),
                ('modf_bounty', models.FloatField()),
                ('skin', models.TextField(blank=True, null=True)),
                ('tutorial_first_ship_built', models.BooleanField()),
                ('tutorial_first_colonisation_ship_built', models.BooleanField()),
                ('leave_alliance_datetime', models.DateTimeField(blank=True, null=True)),
                ('production_prestige', models.IntegerField()),
                ('score_visibility_last_change', models.DateTimeField()),
                ('credits_produced', models.BigIntegerField()),
                ('mod_prestige_from_ships', models.FloatField()),
                ('mod_planet_need_ore', models.FloatField()),
                ('mod_planet_need_hydrocarbon', models.FloatField()),
                ('mod_fleets', models.FloatField()),
                ('security_level', models.IntegerField()),
                ('prestige_points_refund', models.IntegerField()),
                ('alliance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.AlliancesRanks')),
                ('lastplanetid', models.ForeignKey(blank=True, db_column='lastplanetid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersRegistrationAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField()),
                ('address', models.TextField()),
            ],
            options={
                'db_table': 'users_registration_address',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersOptionsHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('action', models.SmallIntegerField()),
                ('info', models.TextField()),
                ('browser', models.TextField()),
                ('address', models.BigIntegerField(blank=True, null=True)),
                ('forwarded_address', models.TextField(blank=True, null=True)),
                ('browserid', models.BigIntegerField()),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_options_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersNewemails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=128)),
                ('key', models.CharField(max_length=8)),
                ('expiration', models.DateTimeField()),
                ('userid', models.OneToOneField(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_newemails',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersHolidays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('min_end_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('activated', models.BooleanField()),
                ('userid', models.OneToOneField(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_holidays',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersFleetsCategories',
            fields=[
                ('userid', models.IntegerField(primary_key=True, serialize=False)),
                ('category', models.SmallIntegerField()),
                ('label', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'users_fleets_categories',
                'managed': True,
                'unique_together': {('userid', 'category')},
            },
        ),
        migrations.CreateModel(
            name='UsersFavoriteLocations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('galaxy', models.SmallIntegerField()),
                ('sector', models.SmallIntegerField(blank=True, null=True)),
                ('added', models.DateTimeField()),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_favorite_locations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersExpenses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('credits', models.IntegerField()),
                ('credits_delta', models.IntegerField()),
                ('buildingid', models.IntegerField(blank=True, null=True)),
                ('shipid', models.IntegerField(blank=True, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('fleetid', models.IntegerField(blank=True, null=True)),
                ('planetid', models.IntegerField(blank=True, null=True)),
                ('ore', models.IntegerField(blank=True, null=True)),
                ('hydrocarbon', models.IntegerField(blank=True, null=True)),
                ('to_alliance', models.IntegerField(blank=True, null=True)),
                ('to_user', models.IntegerField(blank=True, null=True)),
                ('leave_alliance', models.IntegerField(blank=True, null=True)),
                ('spyid', models.IntegerField(blank=True, null=True)),
                ('scientists', models.IntegerField(blank=True, null=True)),
                ('soldiers', models.IntegerField(blank=True, null=True)),
                ('researchid', models.IntegerField(blank=True, null=True)),
                ('login', models.DateTimeField(blank=True, null=True)),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_expenses',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersConnections',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField()),
                ('forwarded_address', models.CharField(blank=True, max_length=64, null=True)),
                ('browser', models.CharField(max_length=128)),
                ('address', models.BigIntegerField()),
                ('browserid', models.BigIntegerField()),
                ('disconnected', models.DateTimeField(blank=True, null=True)),
                ('userid', models.ForeignKey(blank=True, db_column='userid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_connections',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersBounty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bounty', models.BigIntegerField()),
                ('reward_time', models.DateTimeField()),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_bounty',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UsersAllianceHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined', models.DateTimeField()),
                ('left', models.DateTimeField()),
                ('taxes_paid', models.BigIntegerField()),
                ('credits_given', models.BigIntegerField()),
                ('credits_taken', models.BigIntegerField()),
                ('alliance_tag', models.CharField(max_length=4)),
                ('alliance_name', models.CharField(max_length=32)),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_alliance_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('credits', models.IntegerField(blank=True, null=True)),
                ('type', models.SmallIntegerField()),
                ('key', models.CharField(blank=True, max_length=8, null=True, unique=True)),
                ('spotted', models.BooleanField()),
                ('level', models.SmallIntegerField()),
                ('target_id', models.IntegerField(blank=True, null=True)),
                ('target_name', models.CharField(blank=True, max_length=16, null=True)),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'spy',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sessions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lastactivity', models.DateTimeField()),
                ('userid', models.OneToOneField(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'sessions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RoutesWaypoints',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('next_waypointid', models.BigIntegerField(blank=True, null=True)),
                ('action', models.SmallIntegerField()),
                ('waittime', models.SmallIntegerField()),
                ('planetid', models.IntegerField(blank=True, null=True)),
                ('ore', models.IntegerField(blank=True, null=True)),
                ('hydrocarbon', models.IntegerField(blank=True, null=True)),
                ('scientists', models.IntegerField(blank=True, null=True)),
                ('soldiers', models.IntegerField(blank=True, null=True)),
                ('workers', models.IntegerField(blank=True, null=True)),
                ('routeid', models.ForeignKey(db_column='routeid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Routes')),
            ],
            options={
                'db_table': 'routes_waypoints',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResearchesPending',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('looping', models.BooleanField()),
                ('researchid', models.ForeignKey(db_column='researchid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbResearch')),
                ('userid', models.OneToOneField(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'researches_pending',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Reports',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField()),
                ('subtype', models.SmallIntegerField()),
                ('datetime', models.DateTimeField()),
                ('read_date', models.DateTimeField(blank=True, null=True)),
                ('battleid', models.IntegerField(blank=True, null=True)),
                ('fleet_name', models.CharField(blank=True, max_length=18, null=True)),
                ('planetid', models.IntegerField(blank=True, null=True)),
                ('ore', models.IntegerField()),
                ('hydrocarbon', models.IntegerField()),
                ('scientists', models.IntegerField()),
                ('soldiers', models.IntegerField()),
                ('workers', models.IntegerField()),
                ('credits', models.IntegerField()),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('upkeep_planets', models.IntegerField(blank=True, null=True)),
                ('upkeep_scientists', models.IntegerField(blank=True, null=True)),
                ('upkeep_ships', models.IntegerField(blank=True, null=True)),
                ('upkeep_ships_in_position', models.IntegerField(blank=True, null=True)),
                ('upkeep_ships_parked', models.IntegerField(blank=True, null=True)),
                ('upkeep_soldiers', models.IntegerField(blank=True, null=True)),
                ('upkeep_commanders', models.IntegerField(blank=True, null=True)),
                ('planet_name', models.TextField(blank=True, null=True)),
                ('planet_relation', models.SmallIntegerField(blank=True, null=True)),
                ('planet_ownername', models.TextField(blank=True, null=True)),
                ('data', models.TextField()),
                ('allianceid', models.ForeignKey(blank=True, db_column='allianceid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Alliances')),
                ('buildingid', models.ForeignKey(blank=True, db_column='buildingid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
                ('commanderid', models.ForeignKey(blank=True, db_column='commanderid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Commanders')),
                ('fleetid', models.ForeignKey(blank=True, db_column='fleetid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Fleets')),
                ('invasionid', models.ForeignKey(blank=True, db_column='invasionid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Invasions')),
                ('ownerid', models.ForeignKey(db_column='ownerid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='report_owner_set', to='exile.Users')),
                ('researchid', models.ForeignKey(blank=True, db_column='researchid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbResearch')),
                ('spyid', models.ForeignKey(blank=True, db_column='spyid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Spy')),
                ('userid', models.ForeignKey(blank=True, db_column='userid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='report_user_set', to='exile.Users')),
            ],
            options={
                'db_table': 'reports',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlanetTrainingPending',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('scientists', models.IntegerField()),
                ('soldiers', models.IntegerField()),
                ('planetid', models.ForeignKey(db_column='planetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
            ],
            options={
                'db_table': 'planet_training_pending',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlanetShipsPending',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('quantity', models.IntegerField()),
                ('recycle', models.BooleanField()),
                ('take_resources', models.BooleanField()),
                ('planetid', models.ForeignKey(db_column='planetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbShips')),
            ],
            options={
                'db_table': 'planet_ships_pending',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlanetEnergyTransfer',
            fields=[
                ('planetid', models.IntegerField(primary_key=True, serialize=False)),
                ('target_planetid', models.IntegerField()),
                ('energy', models.IntegerField()),
                ('effective_energy', models.IntegerField()),
                ('enabled', models.BooleanField()),
                ('activation_datetime', models.DateTimeField()),
            ],
            options={
                'db_table': 'planet_energy_transfer',
                'managed': True,
                'unique_together': {('planetid', 'target_planetid')},
            },
        ),
        migrations.AddField(
            model_name='navplanet',
            name='ownerid',
            field=models.ForeignKey(blank=True, db_column='ownerid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users'),
        ),
        migrations.CreateModel(
            name='MessagesAddresseeHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('addresseeid', models.ForeignKey(db_column='addresseeid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='mah_addressee_set', to='exile.Users')),
                ('ownerid', models.ForeignKey(db_column='ownerid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='mah_owner_set', to='exile.Users')),
            ],
            options={
                'db_table': 'messages_addressee_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('read_date', models.DateTimeField(blank=True, null=True)),
                ('owner', models.CharField(max_length=20)),
                ('sender', models.CharField(max_length=20)),
                ('subject', models.CharField(max_length=80)),
                ('body', models.TextField()),
                ('credits', models.IntegerField()),
                ('deleted', models.BooleanField()),
                ('bbcode', models.BooleanField()),
                ('ownerid', models.ForeignKey(blank=True, db_column='ownerid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='message_owner_set', to='exile.Users')),
                ('senderid', models.ForeignKey(blank=True, db_column='senderid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='message_sender_set', to='exile.Users')),
            ],
            options={
                'db_table': 'messages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MarketSales',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ore', models.IntegerField()),
                ('hydrocarbon', models.IntegerField()),
                ('credits', models.IntegerField()),
                ('sale_time', models.DateTimeField()),
                ('ore_price', models.SmallIntegerField()),
                ('hydrocarbon_price', models.SmallIntegerField()),
                ('planetid', models.ForeignKey(db_column='planetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
            ],
            options={
                'db_table': 'market_sales',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MarketPurchases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ore', models.IntegerField()),
                ('hydrocarbon', models.IntegerField()),
                ('credits', models.IntegerField()),
                ('delivery_time', models.DateTimeField()),
                ('ore_price', models.SmallIntegerField()),
                ('hydrocarbon_price', models.SmallIntegerField()),
                ('planetid', models.ForeignKey(db_column='planetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
            ],
            options={
                'db_table': 'market_purchases',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogReferersUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('userid', models.IntegerField()),
                ('page', models.TextField(blank=True, null=True)),
                ('refererid', models.ForeignKey(db_column='refererid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.LogReferers')),
            ],
            options={
                'db_table': 'log_referers_users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LogMultiAccountWarnings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ucid', models.ForeignKey(db_column='ucid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='lmaw_userco1_set', to='exile.UsersConnections')),
                ('withid', models.ForeignKey(db_column='withid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='lmaw_userco2_set', to='exile.UsersConnections')),
            ],
            options={
                'db_table': 'log_multi_account_warnings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FleetsItems',
            fields=[
                ('fleetid', models.IntegerField(primary_key=True, serialize=False)),
                ('resourceid', models.IntegerField()),
                ('quantity', models.IntegerField()),
            ],
            options={
                'db_table': 'fleets_items',
                'managed': True,
                'unique_together': {('fleetid', 'resourceid')},
            },
        ),
        migrations.AddField(
            model_name='fleets',
            name='dest_planetid',
            field=models.ForeignKey(blank=True, db_column='dest_planetid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='fleet_dest_planet_set', to='exile.NavPlanet'),
        ),
        migrations.AddField(
            model_name='fleets',
            name='next_waypointid',
            field=models.ForeignKey(blank=True, db_column='next_waypointid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.RoutesWaypoints'),
        ),
        migrations.AddField(
            model_name='fleets',
            name='ownerid',
            field=models.ForeignKey(db_column='ownerid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users'),
        ),
        migrations.AddField(
            model_name='fleets',
            name='planetid',
            field=models.ForeignKey(blank=True, db_column='planetid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='fleet_planet_set', to='exile.NavPlanet'),
        ),
        migrations.AddField(
            model_name='commanders',
            name='ownerid',
            field=models.ForeignKey(db_column='ownerid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users'),
        ),
        migrations.CreateModel(
            name='ChatLines',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField()),
                ('message', models.CharField(max_length=512)),
                ('action', models.SmallIntegerField(blank=True, null=True)),
                ('login', models.CharField(max_length=16)),
                ('allianceid', models.IntegerField(blank=True, null=True)),
                ('userid', models.IntegerField(blank=True, null=True)),
                ('chatid', models.ForeignKey(db_column='chatid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Chat')),
            ],
            options={
                'db_table': 'chat_lines',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BattlesShips',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_id', models.IntegerField()),
                ('owner_name', models.CharField(max_length=16)),
                ('fleet_name', models.CharField(max_length=18)),
                ('before', models.IntegerField()),
                ('after', models.IntegerField()),
                ('killed', models.IntegerField()),
                ('won', models.BooleanField()),
                ('damages', models.IntegerField()),
                ('fleet_id', models.IntegerField()),
                ('attacked', models.BooleanField()),
                ('battleid', models.ForeignKey(db_column='battleid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Battles')),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbShips')),
            ],
            options={
                'db_table': 'battles_ships',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BattlesFleetsShipsKills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('destroyed_shipid', models.ForeignKey(db_column='destroyed_shipid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='bfsk_destroyed_ship_set', to='exile.DbShips')),
                ('fleetid', models.ForeignKey(db_column='fleetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.BattlesFleets')),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='bfsk_ship_set', to='exile.DbShips')),
            ],
            options={
                'db_table': 'battles_fleets_ships_kills',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BattlesFleetsShips',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('before', models.IntegerField()),
                ('after', models.IntegerField()),
                ('killed', models.IntegerField()),
                ('damages', models.IntegerField()),
                ('fleetid', models.ForeignKey(db_column='fleetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.BattlesFleets')),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbShips')),
            ],
            options={
                'db_table': 'battles_fleets_ships',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AlliancesWalletRequests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credits', models.IntegerField()),
                ('description', models.CharField(max_length=128)),
                ('datetime', models.DateTimeField()),
                ('result', models.BooleanField(blank=True, null=True)),
                ('allianceid', models.ForeignKey(db_column='allianceid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Alliances')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'alliances_wallet_requests',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AlliancesWalletJournal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('userid', models.IntegerField(blank=True, null=True)),
                ('credits', models.IntegerField()),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('source', models.CharField(blank=True, max_length=38, null=True)),
                ('type', models.SmallIntegerField()),
                ('destination', models.CharField(blank=True, max_length=38, null=True)),
                ('groupid', models.IntegerField()),
                ('allianceid', models.ForeignKey(db_column='allianceid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Alliances')),
            ],
            options={
                'db_table': 'alliances_wallet_journal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AlliancesReports',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField()),
                ('subtype', models.SmallIntegerField()),
                ('datetime', models.DateTimeField()),
                ('read_date', models.DateTimeField(blank=True, null=True)),
                ('battleid', models.IntegerField(blank=True, null=True)),
                ('fleet_name', models.CharField(blank=True, max_length=18, null=True)),
                ('planetid', models.IntegerField(blank=True, null=True)),
                ('ore', models.IntegerField()),
                ('hydrocarbon', models.IntegerField()),
                ('scientists', models.IntegerField()),
                ('soldiers', models.IntegerField()),
                ('workers', models.IntegerField()),
                ('credits', models.IntegerField()),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('invited_username', models.CharField(blank=True, max_length=20, null=True)),
                ('planet_name', models.TextField(blank=True, null=True)),
                ('planet_relation', models.SmallIntegerField(blank=True, null=True)),
                ('planet_ownername', models.TextField(blank=True, null=True)),
                ('data', models.TextField()),
                ('allianceid', models.ForeignKey(blank=True, db_column='allianceid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ar_alliance_set', to='exile.Alliances')),
                ('buildingid', models.ForeignKey(blank=True, db_column='buildingid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
                ('commanderid', models.ForeignKey(blank=True, db_column='commanderid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Commanders')),
                ('fleetid', models.ForeignKey(blank=True, db_column='fleetid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Fleets')),
                ('invasionid', models.ForeignKey(blank=True, db_column='invasionid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Invasions')),
                ('ownerallianceid', models.ForeignKey(db_column='ownerallianceid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='ar_owner_alliance_set', to='exile.Alliances')),
                ('ownerid', models.ForeignKey(db_column='ownerid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='ar_owner_set', to='exile.Users')),
                ('researchid', models.ForeignKey(blank=True, db_column='researchid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbResearch')),
                ('spyid', models.ForeignKey(blank=True, db_column='spyid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Spy')),
                ('userid', models.ForeignKey(blank=True, db_column='userid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ar_user_set', to='exile.Users')),
            ],
            options={
                'db_table': 'alliances_reports',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='alliances',
            name='chatid',
            field=models.ForeignKey(db_column='chatid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Chat'),
        ),
        migrations.CreateModel(
            name='UsersShipsKills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('killed', models.IntegerField()),
                ('lost', models.IntegerField()),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbShips')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_ships_kills',
                'managed': True,
                'unique_together': {('userid', 'shipid')},
            },
        ),
        migrations.CreateModel(
            name='UsersReports',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField()),
                ('subtype', models.SmallIntegerField()),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_reports',
                'managed': True,
                'unique_together': {('userid', 'type', 'subtype')},
            },
        ),
        migrations.CreateModel(
            name='UsersChats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=16)),
                ('added', models.DateTimeField()),
                ('lastactivity', models.DateTimeField()),
                ('chatid', models.ForeignKey(db_column='chatid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Chat')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_chats',
                'managed': True,
                'unique_together': {('userid', 'chatid')},
            },
        ),
        migrations.CreateModel(
            name='UsersChannels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=16)),
                ('added', models.DateTimeField()),
                ('lastactivity', models.DateTimeField()),
                ('rights', models.IntegerField()),
                ('channelid', models.ForeignKey(db_column='channelid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.ChatChannels')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'users_channels',
                'managed': True,
                'unique_together': {('userid', 'channelid')},
            },
        ),
        migrations.CreateModel(
            name='SpyResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('research_id', models.IntegerField()),
                ('research_level', models.IntegerField()),
                ('spy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Spy')),
            ],
            options={
                'db_table': 'spy_research',
                'managed': True,
                'unique_together': {('spy', 'research_id')},
            },
        ),
        migrations.CreateModel(
            name='SpyPlanet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planet_id', models.IntegerField()),
                ('planet_name', models.CharField(blank=True, max_length=32, null=True)),
                ('floor', models.SmallIntegerField()),
                ('space', models.SmallIntegerField()),
                ('ground', models.IntegerField(blank=True, null=True)),
                ('ore', models.IntegerField(blank=True, null=True)),
                ('hydrocarbon', models.IntegerField(blank=True, null=True)),
                ('workers', models.IntegerField(blank=True, null=True)),
                ('ore_capacity', models.IntegerField(blank=True, null=True)),
                ('hydrocarbon_capacity', models.IntegerField(blank=True, null=True)),
                ('workers_capacity', models.IntegerField(blank=True, null=True)),
                ('ore_production', models.IntegerField(blank=True, null=True)),
                ('hydrocarbon_production', models.IntegerField(blank=True, null=True)),
                ('scientists', models.IntegerField(blank=True, null=True)),
                ('scientists_capacity', models.IntegerField(blank=True, null=True)),
                ('soldiers', models.IntegerField(blank=True, null=True)),
                ('soldiers_capacity', models.IntegerField(blank=True, null=True)),
                ('radar_strength', models.SmallIntegerField(blank=True, null=True)),
                ('radar_jamming', models.SmallIntegerField(blank=True, null=True)),
                ('orbit_ore', models.IntegerField(blank=True, null=True)),
                ('orbit_hydrocarbon', models.IntegerField(blank=True, null=True)),
                ('floor_occupied', models.SmallIntegerField(blank=True, null=True)),
                ('space_occupied', models.SmallIntegerField(blank=True, null=True)),
                ('owner_name', models.CharField(blank=True, max_length=16, null=True)),
                ('energy_consumption', models.IntegerField(blank=True, null=True)),
                ('energy_production', models.IntegerField(blank=True, null=True)),
                ('pct_ore', models.SmallIntegerField(blank=True, null=True)),
                ('pct_hydrocarbon', models.SmallIntegerField(blank=True, null=True)),
                ('spy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Spy')),
            ],
            options={
                'db_table': 'spy_planet',
                'managed': True,
                'unique_together': {('spy', 'planet_id')},
            },
        ),
        migrations.CreateModel(
            name='SpyFleet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fleet_name', models.CharField(max_length=18)),
                ('galaxy', models.SmallIntegerField()),
                ('sector', models.SmallIntegerField()),
                ('planet', models.SmallIntegerField()),
                ('size', models.IntegerField(blank=True, null=True)),
                ('signature', models.IntegerField(blank=True, null=True)),
                ('dest_galaxy', models.SmallIntegerField(blank=True, null=True)),
                ('dest_sector', models.SmallIntegerField(blank=True, null=True)),
                ('dest_planet', models.SmallIntegerField(blank=True, null=True)),
                ('fleet_id', models.IntegerField()),
                ('spy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Spy')),
            ],
            options={
                'db_table': 'spy_fleet',
                'managed': True,
                'unique_together': {('spy', 'fleet_id')},
            },
        ),
        migrations.CreateModel(
            name='SpyBuilding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planet_id', models.IntegerField()),
                ('building_id', models.IntegerField()),
                ('endtime', models.DateTimeField(blank=True, null=True)),
                ('quantity', models.SmallIntegerField(blank=True, null=True)),
                ('spy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Spy')),
            ],
            options={
                'db_table': 'spy_building',
                'managed': True,
                'unique_together': {('spy', 'planet_id', 'building_id')},
            },
        ),
        migrations.CreateModel(
            name='Researches',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.SmallIntegerField()),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('researchid', models.ForeignKey(db_column='researchid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbResearch')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'researches',
                'managed': True,
                'unique_together': {('userid', 'researchid')},
            },
        ),
        migrations.CreateModel(
            name='PlanetShips',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('planetid', models.ForeignKey(db_column='planetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbShips')),
            ],
            options={
                'db_table': 'planet_ships',
                'managed': True,
                'unique_together': {('planetid', 'shipid')},
            },
        ),
        migrations.CreateModel(
            name='PlanetBuildingsPending',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('loop', models.BooleanField()),
                ('buildingid', models.ForeignKey(db_column='buildingid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
                ('planetid', models.ForeignKey(db_column='planetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
            ],
            options={
                'db_table': 'planet_buildings_pending',
                'managed': True,
                'unique_together': {('planetid', 'buildingid')},
            },
        ),
        migrations.CreateModel(
            name='PlanetBuildings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.SmallIntegerField()),
                ('destroy_datetime', models.DateTimeField(blank=True, null=True)),
                ('disabled', models.SmallIntegerField()),
                ('buildingid', models.ForeignKey(db_column='buildingid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
                ('planetid', models.ForeignKey(db_column='planetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.NavPlanet')),
            ],
            options={
                'db_table': 'planet_buildings',
                'managed': True,
                'unique_together': {('planetid', 'buildingid')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='navplanet',
            unique_together={('galaxy', 'sector', 'planet')},
        ),
        migrations.CreateModel(
            name='MessagesIgnoreList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField()),
                ('blocked', models.IntegerField()),
                ('ignored_userid', models.ForeignKey(db_column='ignored_userid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='mil_ignored_user_set', to='exile.Users')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='mil_user_set', to='exile.Users')),
            ],
            options={
                'db_table': 'messages_ignore_list',
                'managed': True,
                'unique_together': {('userid', 'ignored_userid')},
            },
        ),
        migrations.CreateModel(
            name='LogMultiSimultaneousWarnings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('userid1', models.ForeignKey(db_column='userid1', on_delete=django.db.models.deletion.DO_NOTHING, related_name='lmsw_user1_set', to='exile.Users')),
                ('userid2', models.ForeignKey(db_column='userid2', on_delete=django.db.models.deletion.DO_NOTHING, related_name='lmsw_user2_set', to='exile.Users')),
            ],
            options={
                'db_table': 'log_multi_simultaneous_warnings',
                'managed': True,
                'unique_together': {('datetime', 'userid1', 'userid2')},
            },
        ),
        migrations.CreateModel(
            name='FleetsShips',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipid', models.IntegerField()),
                ('quantity', models.IntegerField()),
                ('fleetid', models.ForeignKey(db_column='fleetid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Fleets')),
            ],
            options={
                'db_table': 'fleets_ships',
                'managed': True,
                'unique_together': {('fleetid', 'shipid')},
            },
        ),
        migrations.CreateModel(
            name='DbShipsReqResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_researchlevel', models.SmallIntegerField()),
                ('required_researchid', models.ForeignKey(db_column='required_researchid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbResearch')),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbShips')),
            ],
            options={
                'db_table': 'db_ships_req_research',
                'managed': True,
                'unique_together': {('shipid', 'required_researchid')},
            },
        ),
        migrations.CreateModel(
            name='DbShipsReqBuilding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_buildingid', models.ForeignKey(db_column='required_buildingid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
                ('shipid', models.ForeignKey(db_column='shipid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbShips')),
            ],
            options={
                'db_table': 'db_ships_req_building',
                'managed': True,
                'unique_together': {('shipid', 'required_buildingid')},
            },
        ),
        migrations.CreateModel(
            name='DbResearchReqResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_researchlevel', models.SmallIntegerField()),
                ('required_researchid', models.ForeignKey(db_column='required_researchid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='drrr_required_research_set', to='exile.DbResearch')),
                ('researchid', models.ForeignKey(db_column='researchid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='drrr_research_set', to='exile.DbResearch')),
            ],
            options={
                'db_table': 'db_research_req_research',
                'managed': True,
                'unique_together': {('researchid', 'required_researchid')},
            },
        ),
        migrations.CreateModel(
            name='DbResearchReqBuilding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_buildingcount', models.SmallIntegerField()),
                ('required_buildingid', models.ForeignKey(db_column='required_buildingid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
                ('researchid', models.ForeignKey(db_column='researchid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbResearch')),
            ],
            options={
                'db_table': 'db_research_req_building',
                'managed': True,
                'unique_together': {('researchid', 'required_buildingid')},
            },
        ),
        migrations.CreateModel(
            name='DbBuildingsReqResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_researchlevel', models.SmallIntegerField()),
                ('buildingid', models.ForeignKey(db_column='buildingid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbBuildings')),
                ('required_researchid', models.ForeignKey(db_column='required_researchid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.DbResearch')),
            ],
            options={
                'db_table': 'db_buildings_req_research',
                'managed': True,
                'unique_together': {('buildingid', 'required_researchid')},
            },
        ),
        migrations.CreateModel(
            name='DbBuildingsReqBuilding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buildingid', models.ForeignKey(db_column='buildingid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='dbrb_building_set', to='exile.DbBuildings')),
                ('required_buildingid', models.ForeignKey(db_column='required_buildingid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='dbrb_required_building_set', to='exile.DbBuildings')),
            ],
            options={
                'db_table': 'db_buildings_req_building',
                'managed': True,
                'unique_together': {('buildingid', 'required_buildingid')},
            },
        ),
        migrations.CreateModel(
            name='ChatUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined', models.DateTimeField()),
                ('lastactivity', models.DateTimeField()),
                ('rights', models.IntegerField()),
                ('channelid', models.ForeignKey(db_column='channelid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.ChatChannels')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'chat_users',
                'managed': True,
                'unique_together': {('channelid', 'userid')},
            },
        ),
        migrations.CreateModel(
            name='ChatOnlineusers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lastactivity', models.DateTimeField()),
                ('chatid', models.ForeignKey(db_column='chatid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Chat')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
            ],
            options={
                'db_table': 'chat_onlineusers',
                'managed': True,
                'unique_together': {('chatid', 'userid')},
            },
        ),
        migrations.CreateModel(
            name='BattlesRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user1', models.IntegerField()),
                ('user2', models.IntegerField()),
                ('relation', models.SmallIntegerField()),
                ('battleid', models.ForeignKey(db_column='battleid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Battles')),
            ],
            options={
                'db_table': 'battles_relations',
                'managed': True,
                'unique_together': {('battleid', 'user1', 'user2')},
            },
        ),
        migrations.CreateModel(
            name='AlliancesWars',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cease_fire_requested', models.IntegerField(blank=True, null=True)),
                ('cease_fire_expire', models.DateTimeField(blank=True, null=True)),
                ('created', models.DateTimeField()),
                ('next_bill', models.DateTimeField(blank=True, null=True)),
                ('can_fight', models.DateTimeField()),
                ('allianceid1', models.ForeignKey(db_column='allianceid1', on_delete=django.db.models.deletion.DO_NOTHING, related_name='aw_alliance1_set', to='exile.Alliances')),
                ('allianceid2', models.ForeignKey(db_column='allianceid2', on_delete=django.db.models.deletion.DO_NOTHING, related_name='aw_alliance2_set', to='exile.Alliances')),
            ],
            options={
                'db_table': 'alliances_wars',
                'managed': True,
                'unique_together': {('allianceid1', 'allianceid2')},
            },
        ),
        migrations.CreateModel(
            name='AlliancesTributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credits', models.IntegerField()),
                ('next_transfer', models.DateTimeField()),
                ('created', models.DateTimeField()),
                ('allianceid', models.ForeignKey(db_column='allianceid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='at_alliance_set', to='exile.Alliances')),
                ('target_allianceid', models.ForeignKey(db_column='target_allianceid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='at_target_alliance_set', to='exile.Alliances')),
            ],
            options={
                'db_table': 'alliances_tributes',
                'managed': True,
                'unique_together': {('allianceid', 'target_allianceid')},
            },
        ),
        migrations.CreateModel(
            name='AlliancesNapsOffers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('declined', models.BooleanField()),
                ('replied', models.DateTimeField(blank=True, null=True)),
                ('guarantee', models.IntegerField()),
                ('guarantee_asked', models.IntegerField()),
                ('break_interval', models.DurationField()),
                ('allianceid', models.ForeignKey(db_column='allianceid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='ano_alliance_set', to='exile.Alliances')),
                ('recruiterid', models.ForeignKey(blank=True, db_column='recruiterid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Users')),
                ('targetallianceid', models.ForeignKey(db_column='targetallianceid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='ano_target_alliance_set', to='exile.Alliances')),
            ],
            options={
                'db_table': 'alliances_naps_offers',
                'managed': True,
                'unique_together': {('allianceid', 'targetallianceid')},
            },
        ),
        migrations.CreateModel(
            name='AlliancesNaps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('guarantee', models.IntegerField()),
                ('share_locs', models.BooleanField()),
                ('share_radars', models.BooleanField()),
                ('give_diplomacy_percent', models.SmallIntegerField()),
                ('break_on', models.DateTimeField(blank=True, null=True)),
                ('break_interval', models.DurationField()),
                ('allianceid1', models.ForeignKey(db_column='allianceid1', on_delete=django.db.models.deletion.DO_NOTHING, related_name='an_alliance1_set', to='exile.Alliances')),
                ('allianceid2', models.ForeignKey(db_column='allianceid2', on_delete=django.db.models.deletion.DO_NOTHING, related_name='an_alliance2_set', to='exile.Alliances')),
            ],
            options={
                'db_table': 'alliances_naps',
                'managed': True,
                'unique_together': {('allianceid1', 'allianceid2')},
            },
        ),
        migrations.CreateModel(
            name='AlliancesInvitations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('declined', models.BooleanField()),
                ('replied', models.DateTimeField(blank=True, null=True)),
                ('allianceid', models.ForeignKey(db_column='allianceid', on_delete=django.db.models.deletion.DO_NOTHING, to='exile.Alliances')),
                ('recruiterid', models.ForeignKey(blank=True, db_column='recruiterid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ai_recruter_set', to='exile.Users')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='ai_user_set', to='exile.Users')),
            ],
            options={
                'db_table': 'alliances_invitations',
                'managed': True,
                'unique_together': {('allianceid', 'userid')},
            },
        ),
    ]
